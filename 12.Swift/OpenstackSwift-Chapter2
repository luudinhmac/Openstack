chapter2: Swift

Swift là project multi-tennant, có khả năng mở rộng, và có hệ thống lưu trữ đối tượng chặt chẽ được thết kế để lưu trữ 1 lượng lớn dữ liệu phi cấu trúc với chi phí thấp, Swift được sử dụng bởi các doanh nghiệp thuộc mọi quy mô, các nhà cung cấp dịch vu, các tổ chức nghiên cứu trên toàn thế giới. Nó thường được sử dụng để lưu trữ dữ liệu phi cấu trúc như: tài liêu, nội dung web, backup, hình ảnh, các snapshot của máy ảo. 
Swift không phải là 1 hệ thống tập tin truyền thống hay 1 khối thiết bị.. Thay vào đó nó cho phép bạn lưu trữ, truy xuất, xóa các dối tượng cùng với metadata của nó trong container thông qua RESTful API.
Đặc điểm chính của Swift bao gồm:
- Khả năng mở rộng: Swift được thiết kế để mở rộng quy mô tuyến tính đựa trên lượng dữ liệu cần phải được lưu trữ và có bao nh ng sử dụng cần để được phục vụ. Nghĩa là nó có quy mô từ vài nút với 1 vài ổ đĩa, tới hàng chục, hàng trăm petabyte dung lượng lưu trữ. khi hệ thống phát triển trong việc sử dụng và số lượng yêu cầu tăng, hiệu suất không làm suy giảm một phần vì swift được thiết kế để mở rộng, không có điểm nào sai sót, để mở rộng, hệ thống cần thêm các nút lưu trữ và thêm các nút proxy giúp phải triển mạng lưới và tìm ra những nơi bị tắc nghẽn.
- Độ bền: Kiến trúc phân tán tiên tiến của Swift chỉ ra nó có cung cấp khả năng lưu trữ lâu bền. Bản chất của độ bền là các đối tượng được lưu trữ sẽ luôn có sẵn và đảm bảo được tính toàn vẹn dữ liêu. Để đảm bảo 1 đối tượng luôn sẵn có, Swift sao chép nó và phân phối các bản sao trên các cluster. Quy trình kiểm toán chạy, xác minh dữ liệu vẫn tốt. Repicators(bộ sao) chạy để đảm bảo chính xác số lượng bản ghi trong các cluster. Trong trường hợp thiết bị bị lỗi, các bản sao dữ liệu bị mất sẽ được nhân rộng và được đặt khắp các cluster để đảm bảo mức độ bền được duy trì.
- Khả năng đa khu vực: Swift có thể phân phối dữ liệu qua nhiều trung tâm dữ liệu, trong đó có thể có độ trễ cao giữa các địa điểm. Phân phối có thể thực hiện với 1 số lý do. 1 lý do là nhằm cung cấp tính sẵn sàng cao của dữ liệu bằng cách cho phép nó được truy cập từ mỗi khu vực. 1 lý do khác là sẽ chỉ định là 1 khu vực nhằm khăc phục các khu vực thảm họa, thiên tai. Swift thực hiện điều này bằng cách cho phép định nghĩa ra các khu vực(region) và các vùng(zone) bên trong cluster. Khu vực thường chỉ định ranh rới địa lý, chẳng hạn các trung tâm dữ liệu tại thành phố. Vùng là 1 phần của khu vực, nó định nghĩa 1 điểm sai sót trong 1 nhóm máy móc(như kiểu xác định 1 rack trong rất nhiều máy cùng cắm chung vào 1 switch). Việc phân ra sử dụng khu vực và vùng đảm bảo rằng Swift đặt bản ghi trong các cluster có tính dự phòng cao. Nó cho phép cluster tồn tại ngay cả khi zone không có sẵn, điều này đảm bảo thêm độ bền và tính sẵn sàng của dữ liệu.
- Tính đồng thời cao: Swift là kiến trúc để phân phối các yêu cầu lên nhiều server. Swift có thể tận dụng lợi thế của tất cả các năng lực máy chủ có sẵn để xử lý nhiều yêu cầu 1 lúc. Điều này làm tăng tính đồng thời của hệ thống và tổng sản lượng có sẵn. Đây là lợi thế lớn cho những người cần để đáp ứng các nhu cầu lưu trữ của khối lượng công việc quy mô lớn.
- Lưu trữ linh hoạt, mềm dẻo: Swift cung cấp sựu linh hoạt tuyệt vời trong khiến trúc dữ liệu và phần cứng, cho phép các nhà khai thách điều chỉnh lưu trữ của họ để đáp ứng các nhu cầu cụ thể cho người dùng của họ. Ngoài khả năng kết hợp với các phần cứng khác nhaum swift có chính sách lưu trữ cho phép nhà khai thác sử dụng phần cứng 1 cách tốt nhất, xử lý các tình huống. Ví dụ: cần hiệu suất cao với 1 số dữ liệu? Tạo 1 chính sách lưu trữ mà chỉ sử dụng các ổ SSD trong cluster. Cần 1 dữ liệu sẵn sàng trên toàn cầu? Tạo 1 chính sách lưu trữ bao gồm các trung tâm dữ liệu trên toàn thế giới. Cần 1 dữ liệu ở quốc gia cụ thế? Tạo 1 chính sách sẽ đặt dữ liệu chỉ ở 1 khu vực duy nhất. Phương pháp lưu trữ cơ bản của Swift cũng r linh hoạt, kiến trúc pluggable của nó cho phép đưa vào các hệ thống lưu trữ mới, thông thường, các thiết bị lưu trữ gắn trực tiếp để được sử dụng xây thành 1 cluster nhưng công nghệ mới nổi như key/value Ethernet drives của Seagate và các mã nguồn mở khác và hệ thống lưu trữ thường mai có thể trở thành mục tiêu cảu cluster.
- Mã nguồn mở: Swift là mã nguồn mở với nhiều nhà phát triển, có khả năng phát hiện lỗ hổng lỗi cao hơn.
- Hệ sinh thái lớn: Các công cụ, tiện ích xung quanh swift là rất đa dạng và phong phú. Nhiều công cụ, thư viên, API, ứng dụng đã hỗ trợ API của Swift. Giúp cho việc triển khai, thực hành trở nên dễ dàng hơn
- Chạy trên các phần cứng thương mại: Swift được thiết kế từ dưới trong việc xử lý lỗi nên độ tin cậy cảu các thành phần cá nhân là ít quan trọng. Swift có thể cài đặt nhanh chóng và chạy trên các phần cứng thương mại, thậm chí là cả ổ điwã của máu tính bàn thông thường. Các cty hoàn toàn có thể lựa chọn  bất kỳ phần cứng chất lượng phù hợp với yêu cầu
- Thân thiện với các Developer: Các Dev được hưởng lợi từ sự phong phú và phát triển các công cụ xung quanh Swift và các thư viện. Ngoài các chức năng cốt lỗi để lưu trữ dữ liệu và phục vụ lâu bền ở quy mô lớn, Swift còn hiều tính năng tích họp mà làm cho nó dễ dàng cho các nhà phát triển và người dùng. Các tính năng hữu ích bao gồm: 
 + Hosting web tĩnh: Hỗ trợ CSS, client JavaScrip, người dùng có thể lưu trữ web tĩnh, kịch bản trên Swift, Swif cũng hỗ trợ tùy chình các trang lỗi và tạo ra các danh sách
 + Tự động hết hạn đối tượng: Đối tượng có thể được cung cấp 1 thời gian hết hạn sau đó không còn sẵn sàng và bị xóa, điều này sẽ rất hữu ích cho việc ngăn chẵn dữ liệu cũ được lưu thông và tuân thủ các chính sách duy trì dữ liệu
 + URL giới hạn thời gian:  URL có thể được tạo và có giá trị trong 1 khoảng thời gian nhất định.
 + Quotas: giới ghạn khả năng lưu trữu 
 + Upload trực tiếp từ các hình thức HTML: Người dùng có thể tạo ra các hình thức web upload các dữ liệu trực tiếp vào Swift để no không phải được proxy thông qua các máy chủ.
 + Phiên bản: Người dùng có thể viết 1 phiên bản mới về đối tượng trong khi vẫn giữ bản cũ.
 + Hỗ trợ chunked chuyển mã hóa: Người dung có thể upload dữ liệu lên Swift mà không biết trước thời gian lớn như nào với đối tượng lưu trữ.
 + Multirange reads: Người dùng có thể đọc 1 hoặc nhiều phần của 1 đối tượng với 1 yêu cầu đọc duy nhất.
 + Kiểm soát truy cập: Người dùng có thể cấu hình truy cập dữ liệu của hộ để cung cấp cho người khác hoặc từ chối khả năng đọc hoặc ghi dữ liệu.
 + Ctrinh truy cập đến dữ liệu địa phương: Deployers có thể được tích hợp với các hệ thống Swift như Handoop và tận dụng lợi thế các thông tin địa phương để yêu cầu mạng thấp hơn khi xử lý dữ liệu.
 + Tùy biến: Middleware có thể được phát triển và chạy trực tiếp trên hệ thống lưu trữ
 + Thân thiện với người điều hành: Swift là hấp dẫn cho các nhà khai thác CNTT với 1 số lý do: chi phí thaaos, các mấy chuẩn công nghiệp và các ổ. Bạn có thể quản lý nhiều dữ liệu hơn và 1 cách dễ dàng, API được sử dụng để lưu trữ và phục vụ dữ liệu, Việc kích hoạt các ứng dụng mới là dễ dàng và nhanh chóng. Kiến trúc bền vững cửa Swift khiến khả năng chịu lỗi tăng cao.
 + Tính năng sắp tới: Các cộng đồng phát triển Swift đang làm việc trên nhiều tính năng bổ sung mà sẽ được thêm vào phiên bản sắp tới của Swift, chẳng hạn như chính sách lưu trữ và hỗ trợ cho tẩy xoá mã hóa. Chính sách lưu trữ sẽ cho phép các nhà phát triển và người dùng lựa chọn những dữ liệu phần cứng là, làm thế nào các dữ liệu được lưu trữ trên phần cứng, và trong đó khu vực dữ liệu cư trú. Tẩy xoá mã hóa hỗ trợ trong Swift sẽ cho phép deployers để lưu trữ dữ liệu với tẩy xoá mã hóa thay vì (hoặc bổ sung cho) bản sao mô hình chuẩn của Swift. Mục tiêu thiết kế là để có thể có lưu trữ tẩy xoá mã cộng với bản sao cùng tồn tại trong một cụm Swift duy nhất. Điều này sẽ cho phép một sự lựa chọn trong cách lưu trữ dữ liệu và các ứng dụng sẽ cho phép để làm cho thương mại-offs phải dựa trên việc sử dụng chúng
 